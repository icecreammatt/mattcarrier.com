<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Systemd on Matt Carrier</title>
    <link>https://mattcarrier.com/tags/systemd/</link>
    <description>Recent content in Systemd on Matt Carrier</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Copyright 2015</copyright>
    <lastBuildDate>Mon, 11 May 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mattcarrier.com/tags/systemd/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Setup CoreOS with iptables on DigitalOcean</title>
      <link>https://mattcarrier.com/post/core-os-iptables/</link>
      <pubDate>Mon, 11 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://mattcarrier.com/post/core-os-iptables/</guid>
      <description>

&lt;p&gt;This post covers how to setup CoreOS with iptables on DigitalOcean. It also covers how to start a Docker container using systemd to keep the container running after crashes and reboots.&lt;/p&gt;

&lt;h2 id=&#34;prepare-cloud-config:fadcffb6635abadf6f076ec975a3b075&#34;&gt;Prepare cloud-config&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;It is important to leave in the #cloud-config comment at the top.&lt;br /&gt;
reboot-strategy is set to off to prevent random restarts for updates&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;#cloud-config

coreos:
  update:
    reboot-strategy: off
  units:
    - name: iptables-restore.service
      enable: true
      command: start
write_files:
  - path: /var/lib/iptables/rules-save
    permissions: 0644
    owner: &#39;root:root&#39;
    content: |
      *filter
      :INPUT DROP [0:0]
      :FORWARD DROP [0:0]
      :OUTPUT ACCEPT [0:0]
      -A INPUT -i lo -j ACCEPT
      -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
      -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT
      -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT
      -A INPUT -p tcp -m tcp --dport 443 -j ACCEPT
      -A INPUT -p icmp -m icmp --icmp-type 0 -j ACCEPT
      -A INPUT -p icmp -m icmp --icmp-type 3 -j ACCEPT
      -A INPUT -p icmp -m icmp --icmp-type 11 -j ACCEPT
      COMMIT
      
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;droplet-settings:fadcffb6635abadf6f076ec975a3b075&#34;&gt;Droplet Settings&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Change region and size as needed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Droplet Hostname&lt;/li&gt;
&lt;li&gt;Select Size&lt;/li&gt;
&lt;li&gt;Select Region&lt;/li&gt;
&lt;li&gt;Available Settings

&lt;ul&gt;
&lt;li&gt;User Data

&lt;ul&gt;
&lt;li&gt;Copy data from &lt;code&gt;cloud-config&lt;/code&gt; above into the user data box.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt;  Be sure to include a newline character after the last line in the cloud config&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Select the CoreOS Image&lt;/li&gt;
&lt;li&gt;Add SSH Keys&lt;/li&gt;
&lt;li&gt;Create Droplet&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;ssh-into-server:fadcffb6635abadf6f076ec975a3b075&#34;&gt;SSH into Server&lt;/h2&gt;

&lt;p&gt;Connect to the server using the IP that displayed after creating the droplet. &lt;code&gt;ssh core@IP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Confirm iptable rules have applied&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;core@core ~ $ sudo iptables -nvL
Chain INPUT (policy DROP 16 packets, 922 bytes)
 pkts bytes target     prot opt in     out     source               destination
    0     0 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0
 2475   12M ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED
    1    64 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:22
    0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:80
    0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:443
    0     0 ACCEPT     icmp --  *      *       0.0.0.0/0            0.0.0.0/0            icmptype 0
    0     0 ACCEPT     icmp --  *      *       0.0.0.0/0            0.0.0.0/0            icmptype 3
    0     0 ACCEPT     icmp --  *      *       0.0.0.0/0            0.0.0.0/0            icmptype 11

Chain FORWARD (policy DROP 0 packets, 0 bytes)
 pkts bytes target     prot opt in     out     source               destination
    0     0 DOCKER     all  --  *      docker0  0.0.0.0/0            0.0.0.0/0
    0     0 ACCEPT     all  --  *      docker0  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED
    0     0 ACCEPT     all  --  docker0 !docker0  0.0.0.0/0            0.0.0.0/0
    0     0 ACCEPT     all  --  docker0 docker0  0.0.0.0/0            0.0.0.0/0

Chain OUTPUT (policy ACCEPT 1095 packets, 73391 bytes)
 pkts bytes target     prot opt in     out     source               destination

Chain DOCKER (1 references)
 pkts bytes target     prot opt in     out     source               destination
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;docker-port-binding:fadcffb6635abadf6f076ec975a3b075&#34;&gt;Docker port binding&lt;/h2&gt;

&lt;p&gt;When running Docker containers, be sure to bind them to &lt;code&gt;0.0.0.0&lt;/code&gt; to be accessible outside the firewall. If the intent is for the container to only be accessible internally, then be sure when specifying ports with the &lt;code&gt;-p&lt;/code&gt; flag that &lt;code&gt;127.0.0.1:PORT:PORT&lt;/code&gt; is used. Leaving off the &lt;code&gt;127.0.0.1&lt;/code&gt; defaults to &lt;code&gt;0.0.0.0&lt;/code&gt; making the container publicly available.&lt;/p&gt;

&lt;h2 id=&#34;systemd:fadcffb6635abadf6f076ec975a3b075&#34;&gt;systemd&lt;/h2&gt;

&lt;h3 id=&#34;unit-file:fadcffb6635abadf6f076ec975a3b075&#34;&gt;Unit File&lt;/h3&gt;

&lt;p&gt;Create a systemd unit file to make the container start when the server reboots or when a container crashes. The systemd unit file contains the information needed to start the Docker container.&lt;/p&gt;

&lt;p&gt;Add the unit file here: &lt;code&gt;/etc/systemd/system&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Sample systemd unit file for a simple IP &lt;a href=&#34;https://github.com/icecreammatt/lookup&#34;&gt;lookup service&lt;/a&gt;
&lt;code&gt;/etc/systemd/system/lookup.service&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Unit]
Description=Lookup
After=docker.service
Requires=docker.service

[Service]
TimeoutStartSec=0
Restart=always
ExecStartPre=-/usr/bin/docker kill lookup
ExecStartPre=-/usr/bin/docker rm lookup
ExecStartPre=/usr/bin/docker pull icecreammatt/lookup
ExecStart=/usr/bin/docker run -p 0.0.0.0:80:5000 --name lookup icecreammatt/lookup
ExecStop=/usr/bin/docker stop lookup

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some notes about the unit file:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ExecStartPre=-&lt;/code&gt; The &lt;code&gt;-&lt;/code&gt; right before the &lt;code&gt;/usr&lt;/code&gt; means that this step is optional&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p 0.0.0.0:80:5000&lt;/code&gt; Map port &lt;code&gt;5000&lt;/code&gt; of the container to port &lt;code&gt;80&lt;/code&gt; on the host and bind to &lt;code&gt;0.0.0.0&lt;/code&gt;. Use &lt;code&gt;127.0.0.1&lt;/code&gt; to make this container non publicly accessible.&lt;/li&gt;
&lt;li&gt;Do not use the &lt;code&gt;-d&lt;/code&gt; flag with Docker when using a systemd unit file. Doing so will not allow systemd to track the running status properly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;systemd-commands:fadcffb6635abadf6f076ec975a3b075&#34;&gt;systemd commands&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;After creating the unit file start the container: &lt;code&gt;systemctl start lookup.service&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start on system boot: &lt;code&gt;systemctl enable lookup.service&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Stop from starting on reboot: &lt;code&gt;systemctl disable lookup.service&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Stop the container: &lt;code&gt;systemctl stop lookup.service&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;When making changes to the systemd unit file run &lt;code&gt;systemctl daemon-reload&lt;/code&gt; to update systemd&lt;/li&gt;
&lt;li&gt;The status of the container can be checked with &lt;code&gt;systemctl status lookup.service&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;journalctl&lt;/code&gt; can be used to view system logs&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;cloud-config-continued:fadcffb6635abadf6f076ec975a3b075&#34;&gt;Cloud-config continued&amp;hellip;&lt;/h2&gt;

&lt;p&gt;Optionally systemd services can be added to the cloud-config removing the need to login to the server. The following adjustments cause the server to initialize with the lookup container after boot.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#cloud-config

coreos:
  update:
    reboot-strategy: off
  units:
    - name: iptables-restore.service
      enable: true
      command: start
    - name: lookup.service
      enabled: true
      command: start
write_files:
  - path: /var/lib/iptables/rules-save
    permissions: 0644
    owner: &#39;root:root&#39;
    content: |
      *filter
      :INPUT DROP [0:0]
      :FORWARD DROP [0:0]
      :OUTPUT ACCEPT [0:0]
      -A INPUT -i lo -j ACCEPT
      -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
      -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT
      -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT
      -A INPUT -p tcp -m tcp --dport 443 -j ACCEPT
      -A INPUT -p icmp -m icmp --icmp-type 0 -j ACCEPT
      -A INPUT -p icmp -m icmp --icmp-type 3 -j ACCEPT
      -A INPUT -p icmp -m icmp --icmp-type 11 -j ACCEPT
      COMMIT
  - path: /etc/systemd/system/lookup.service
    permissions: 0644
    owner: &#39;root:root&#39;
    content: |
        [Unit]
        Description=Lookup
        After=docker.service
        Requires=docker.service

        [Service]
        TimeoutStartSec=0
        Restart=always
        ExecStartPre=-/usr/bin/docker kill lookup
        ExecStartPre=-/usr/bin/docker rm lookup
        ExecStartPre=/usr/bin/docker pull icecreammatt/lookup
        ExecStart=/usr/bin/docker run -p 0.0.0.0:80:5000 --name lookup icecreammatt/lookup
        ExecStop=/usr/bin/docker stop lookup

        [Install]
        WantedBy=multi-user.target
        
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dockerhub-authentication:fadcffb6635abadf6f076ec975a3b075&#34;&gt;Dockerhub Authentication&lt;/h2&gt;

&lt;p&gt;Add the two blocks below to allow pulling from a private Docker repository. Replace the &lt;code&gt;XXXXXXXXX&lt;/code&gt; below with the Dockerhub password from &lt;code&gt;~/.dockercfg&lt;/code&gt;. This file is generated after logging into Dockerhub.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  - path: /home/core/.dockercfg
    owner: &#39;core:core&#39;
    permissions: 0644
    content: | 
        {
            &amp;quot;https://index.docker.io/v1/&amp;quot;: {
                &amp;quot;auth&amp;quot;: &amp;quot;XXXXXXXXXXXX&amp;quot;,
                &amp;quot;email&amp;quot;: &amp;quot;dockerhub@email&amp;quot;
            }
        }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add &lt;code&gt;User=core&lt;/code&gt; to run the task as the core user&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Service]
User=core
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;other-resources:fadcffb6635abadf6f076ec975a3b075&#34;&gt;Other resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://fedoraproject.org/wiki/How_to_edit_iptables_rules&#34; target=&#34;_blank&#34;&gt;How to edit iptables rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jimmycuadra.com/posts/securing-coreos-with-iptables&#34; target=&#34;_blank&#34;&gt;Securing CoreOS with iptables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.robhar.com/securing-coreos/&#34; target=&#34;_blank&#34;&gt;CoreOS Iptables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://coreos.com/docs/launching-containers/building/registry-authentication/&#34; target=&#34;_blank&#34;&gt;Using Authentication for a Registry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>